/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import model.Encounter;
import model.PatientRecord;
import model.PatientRecordList;

/**
 *
 * @author amretasrerengarajan
 */
public class AddEncounterPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddEncounterPanel
     */
    PatientRecord patientRecord;
    PatientRecordList patientList;

    boolean isIdValid;
    boolean isNameValid;
    boolean isSysPresValid;
    boolean isDiaPresValid;
    boolean isDateValid;
    boolean isBreathingRateValid;
    boolean isHeartBeatValid;
    boolean isTemperatureValid;

    int patientID;
    String patientName;
    int patientSysPressure;
    int patientDiaPressure;
    int patientBreathing;
    int patientHeartRate;
    float patientTemperature;
    String patientEncounterDateTaken;

    public AddEncounterPanel(PatientRecordList patientList, PatientRecord patientRecord) {
        this.patientList = patientList;
        this.patientRecord = patientRecord;

        initComponents();

        lblWarningPatID.setVisible(false);
        lblWarningPatName.setVisible(false);
        lblWarningDate.setVisible(false);
        lblWarningDiaPressure.setVisible(false);
        lblWarningBreathing.setVisible(false);
        lblWarningHeartBeat.setVisible(false);
        lblWarningTemperature.setVisible(false);
        lblWarningSysPressure.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        lblSysPressure = new javax.swing.JLabel();
        lblDateTaken = new javax.swing.JLabel();
        txtDateTaken = new javax.swing.JTextField();
        txtPatientName = new javax.swing.JTextField();
        txtSysPressure = new javax.swing.JTextField();
        txtPatientID = new javax.swing.JTextField();
        btnAddRecord = new javax.swing.JButton();
        lblWarningPatID = new javax.swing.JLabel();
        lblWarningPatName = new javax.swing.JLabel();
        lblWarningSysPressure = new javax.swing.JLabel();
        lblWarningDate = new javax.swing.JLabel();
        lblDiaPressure = new javax.swing.JLabel();
        txtDiaPressure = new javax.swing.JTextField();
        lblWarningDiaPressure = new javax.swing.JLabel();
        lblBreathing = new javax.swing.JLabel();
        txtBreathing = new javax.swing.JTextField();
        lblWarningBreathing = new javax.swing.JLabel();
        lblHeartBeat = new javax.swing.JLabel();
        txtHeartBeat = new javax.swing.JTextField();
        lblWarningHeartBeat = new javax.swing.JLabel();
        lblWarningTemperature = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        lblTemperature = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Add Encounter for Existing Patient!");

        lblPatientId.setText("Patient ID:");

        lblPatientName.setText("Patient Name:");

        lblSysPressure.setText("Systoic Pressure:");

        lblDateTaken.setText("Date Taken: ");

        txtDateTaken.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDateTakenFocusLost(evt);
            }
        });
        txtDateTaken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateTakenActionPerformed(evt);
            }
        });

        txtPatientName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPatientNameFocusLost(evt);
            }
        });

        txtSysPressure.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSysPressureFocusLost(evt);
            }
        });

        txtPatientID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPatientIDFocusLost(evt);
            }
        });

        btnAddRecord.setText("Add Record");
        btnAddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRecordActionPerformed(evt);
            }
        });

        lblWarningPatID.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningPatID.setText("Invalid ID!");

        lblWarningPatName.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningPatName.setText("Invalid Text!");

        lblWarningSysPressure.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningSysPressure.setText("Invalid!");

        lblWarningDate.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningDate.setText("Invalid Date!");

        lblDiaPressure.setText("Diastolic Pressure:");

        txtDiaPressure.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiaPressureFocusLost(evt);
            }
        });

        lblWarningDiaPressure.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningDiaPressure.setText("Invalid!");

        lblBreathing.setText("Breathing");

        txtBreathing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBreathingFocusLost(evt);
            }
        });

        lblWarningBreathing.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningBreathing.setText("Invalid!");

        lblHeartBeat.setText("Heart Beats:");

        txtHeartBeat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHeartBeatFocusLost(evt);
            }
        });

        lblWarningHeartBeat.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningHeartBeat.setText("Invalid!");

        lblWarningTemperature.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningTemperature.setText("Invalid!");

        txtTemperature.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTemperatureFocusLost(evt);
            }
        });

        lblTemperature.setText("Temperature:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDateTaken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDiaPressure, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(lblPatientId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPatientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBreathing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHeartBeat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSysPressure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtHeartBeat, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblWarningHeartBeat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblWarningBreathing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtDiaPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblWarningDiaPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPatientName)
                                            .addComponent(txtSysPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblWarningPatName, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                            .addComponent(lblWarningSysPressure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblWarningPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(105, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddRecord)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDateTaken, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblWarningTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblWarningDate, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblWarningPatID))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPatientId)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningPatName)
                            .addComponent(lblPatientName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSysPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningSysPressure)
                            .addComponent(lblSysPressure))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiaPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningDiaPressure)
                            .addComponent(lblDiaPressure))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBreathing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningBreathing)
                            .addComponent(lblBreathing))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHeartBeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningHeartBeat)
                            .addComponent(lblHeartBeat))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWarningTemperature)
                            .addComponent(lblTemperature))))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateTaken)
                    .addComponent(txtDateTaken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWarningDate))
                .addGap(18, 18, 18)
                .addComponent(btnAddRecord)
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    public int checkPatientID(String patientID) {
        String regex = "\\d{5}";
        int result;
        isIdValid = patientID.matches(regex);
        if (isIdValid && !patientID.isEmpty()) {
            result = Integer.parseInt(patientID);
        } else {
            result = 0;
        }
        return result;
    }

    public String checkPatientName(String patientName) {
        String regex = "^[a-zA-Z]*$";
        isNameValid = patientName.matches(regex);
        if (isNameValid) {
            return patientName;
        } else {
            return "";
        }
    }

    public int checkSystolicPressure(String sysPressure) {
        String regex = "\\d{3}";
        int result;
        isSysPresValid = sysPressure.matches(regex);
        if (sysPressure.isEmpty()) {
            result = 0;
        } else {
            result = Integer.parseInt(sysPressure);
        }
        if (isSysPresValid && (result >= 120 || result <= 140)) {
            return result;
        } else {
            result = 0;
            return result;
        }
    }

    public int checkDiastolicPressure(String diaPressure) {
        String regex = "\\d{2}";
        int result;
        isDiaPresValid = diaPressure.matches(regex);
        if (diaPressure.isEmpty()) {
            result = 0;
        } else {
            result = Integer.parseInt(diaPressure);
        }
        if (isDiaPresValid && (result >= 80 || result <= 89)) {
            return result;
        } else {
            result = 0;
            return result;
        }
    }

    public int checkBreathing(String breathingRate) {
        String regex = "\\d{2}";
        int result;
        isBreathingRateValid = breathingRate.matches(regex);
        if (isBreathingRateValid && !breathingRate.isEmpty()) {
            result = Integer.parseInt(breathingRate);
        } else {
            result = 0;
        }
        return result;
    }

    public int checkHeartBeat(String heartBeat) {
        String regex = "\\d{2}";
        int result;
        isHeartBeatValid = heartBeat.matches(regex);
        if (isHeartBeatValid && !heartBeat.isEmpty()) {
            result = Integer.parseInt(heartBeat);
        } else {
            result = 0;
        }
        return result;
    }

    public float checkTemperature(String temperature) {
        String regex = "[+-]?([0-9]*[.])?[0-9]+";
        float result;
        isTemperatureValid = temperature.matches(regex);
        if (isTemperatureValid && !temperature.isEmpty()) {
            result = Float.parseFloat(temperature);
        } else {
            result = 0.0F;
        }
        return result;
    }

    public String checkDateTaken(String dateTaken) {
        String regex = "^[0-3]?[0-9]/[0-3]?[0-9]/(?:[0-9]{2})?[0-9]{2}$";
        //Creating a pattern object
        Pattern pattern = Pattern.compile(regex);
        //Matching the compiled pattern in the String
        Matcher matcher = pattern.matcher(dateTaken);
        isDateValid = matcher.matches();
        if (isDateValid) {
            return dateTaken;
        } else {
            return "";
        }
    }

    private void txtDateTakenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateTakenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateTakenActionPerformed

    private void btnAddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRecordActionPerformed
        // TODO add your handling code here:
        boolean checkPatientExists = patientList.checkPatientRecordExist(patientID, patientName);
        if (txtBreathing.getText().isEmpty() || txtDateTaken.getText().isEmpty() || txtDiaPressure.getText().isEmpty()
                || txtHeartBeat.getText().isEmpty() || txtPatientID.getText().isEmpty() || txtPatientName.getText().isEmpty()
                || txtSysPressure.getText().isEmpty() || txtTemperature.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "All fields are mandatory");
        } else {

            if (checkPatientExists) {

                Encounter newEncounter = patientRecord.addEncounter();
                
                newEncounter.setBeats(patientHeartRate);
                newEncounter.setBreathing(patientBreathing);
                newEncounter.setDateTaken(patientEncounterDateTaken);
                newEncounter.setDiastolicPressure(patientDiaPressure);
                newEncounter.setSystolicPressure(patientSysPressure);
                newEncounter.setTemperature(patientTemperature);

                lblWarningPatID.setVisible(false);
                lblWarningPatName.setVisible(false);
                lblWarningDate.setVisible(false);
                lblWarningDiaPressure.setVisible(false);
                lblWarningBreathing.setVisible(false);
                lblWarningHeartBeat.setVisible(false);
                lblWarningTemperature.setVisible(false);
                lblWarningSysPressure.setVisible(false);
                lblWarningSysPressure.setVisible(false);

                JOptionPane.showMessageDialog(this, "Vital Signs added!");

                txtBreathing.setText("");
                txtDateTaken.setText("");
                txtDiaPressure.setText("");
                txtHeartBeat.setText("");
                txtPatientID.setText("");
                txtPatientName.setText("");
                txtSysPressure.setText("");
                txtTemperature.setText("");

            } else {
                JOptionPane.showMessageDialog(this, "This patient does not exist! Create new Patient record!");
                txtBreathing.setText("");
                txtDateTaken.setText("");
                txtDiaPressure.setText("");
                txtHeartBeat.setText("");
                txtPatientID.setText("");
                txtPatientName.setText("");
                txtSysPressure.setText("");
                txtTemperature.setText("");
            }

        }

    }//GEN-LAST:event_btnAddRecordActionPerformed

    private void txtPatientIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPatientIDFocusLost
        // TODO add your handling code here:
        patientID = checkPatientID(txtPatientID.getText());
        if (txtPatientID.getText().isEmpty()) {
            lblWarningPatID.setVisible(false);
        } else {
            if (patientID == 0) {
                txtPatientID.setText("");
                lblWarningPatID.setVisible(true);
            } else {
                lblWarningPatID.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtPatientIDFocusLost

    private void txtPatientNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPatientNameFocusLost
        // TODO add your handling code here:
        String typedPatientName = txtPatientName.getText();
        patientName = checkPatientName(typedPatientName);
        if (typedPatientName.isEmpty()) {
            lblWarningPatName.setVisible(false);
        } else {
            if (isNameValid) {
                lblWarningPatName.setVisible(false);
            } else {
                lblWarningPatName.setVisible(true);
            }
        }
    }//GEN-LAST:event_txtPatientNameFocusLost

    private void txtSysPressureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSysPressureFocusLost
        // TODO add your handling code here:
        patientSysPressure = checkSystolicPressure(txtSysPressure.getText());
        if (txtSysPressure.getText().isEmpty()) {
            lblWarningSysPressure.setVisible(false);
        } else {
            if (patientSysPressure == 0) {
                txtSysPressure.setText("");
                lblWarningSysPressure.setVisible(true);
            } else {
                lblWarningSysPressure.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtSysPressureFocusLost

    private void txtDiaPressureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiaPressureFocusLost
        // TODO add your handling code here:
        patientDiaPressure = checkDiastolicPressure(txtDiaPressure.getText());
        if (txtDiaPressure.getText().isEmpty()) {
            lblWarningDiaPressure.setVisible(false);
        } else {
            if (patientDiaPressure == 0) {
                txtPatientID.setText("");
                lblWarningDiaPressure.setVisible(true);
            } else {
                lblWarningDiaPressure.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtDiaPressureFocusLost

    private void txtBreathingFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBreathingFocusLost
        // TODO add your handling code here:
        patientBreathing = checkBreathing(txtBreathing.getText());
        if (txtBreathing.getText().isEmpty()) {
            lblWarningBreathing.setVisible(false);
        } else {
            if (patientBreathing == 0) {
                txtBreathing.setText("");
                lblWarningBreathing.setVisible(true);
            } else {
                lblWarningBreathing.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtBreathingFocusLost

    private void txtHeartBeatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHeartBeatFocusLost
        // TODO add your handling code here:
        patientHeartRate = checkHeartBeat(txtHeartBeat.getText());
        if (txtHeartBeat.getText().isEmpty()) {
            lblWarningHeartBeat.setVisible(false);
        } else {
            if (patientHeartRate == 0) {
                txtHeartBeat.setText("");
                lblWarningHeartBeat.setVisible(true);
            } else {
                lblWarningHeartBeat.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtHeartBeatFocusLost

    private void txtTemperatureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTemperatureFocusLost
        // TODO add your handling code here:
        patientTemperature = checkTemperature(txtTemperature.getText());
        if (txtTemperature.getText().isEmpty()) {
            lblWarningTemperature.setVisible(false);
        } else {
            if (patientTemperature == 0.0) {
                txtTemperature.setText(String.valueOf(patientTemperature));
                lblWarningTemperature.setVisible(true);
            } else {
                lblWarningTemperature.setVisible(false);
            }
        }
    }//GEN-LAST:event_txtTemperatureFocusLost

    private void txtDateTakenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateTakenFocusLost
        // TODO add your handling code here:
        String typedEncounterDate = txtDateTaken.getText();
        patientEncounterDateTaken = checkDateTaken(typedEncounterDate);
        if (typedEncounterDate.isEmpty()) {
            lblWarningDate.setVisible(false);
        } else {
            if (isDateValid) {
                lblWarningDate.setVisible(false);
            } else {
//                txtDateTaken.setText("");
                lblWarningDate.setVisible(true);
            }
        }
    }//GEN-LAST:event_txtDateTakenFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRecord;
    private javax.swing.JLabel lblBreathing;
    private javax.swing.JLabel lblDateTaken;
    private javax.swing.JLabel lblDiaPressure;
    private javax.swing.JLabel lblHeartBeat;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblSysPressure;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblWarningBreathing;
    private javax.swing.JLabel lblWarningDate;
    private javax.swing.JLabel lblWarningDiaPressure;
    private javax.swing.JLabel lblWarningHeartBeat;
    private javax.swing.JLabel lblWarningPatID;
    private javax.swing.JLabel lblWarningPatName;
    private javax.swing.JLabel lblWarningSysPressure;
    private javax.swing.JLabel lblWarningTemperature;
    private javax.swing.JTextField txtBreathing;
    private javax.swing.JTextField txtDateTaken;
    private javax.swing.JTextField txtDiaPressure;
    private javax.swing.JTextField txtHeartBeat;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtSysPressure;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
